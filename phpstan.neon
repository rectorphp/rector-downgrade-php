includes:
    - vendor/symplify/phpstan-rules/config/symplify-rules.neon

parameters:
    level: 8

    # requires exact closure types
    checkMissingCallableSignature: true

    parallel:
        # to prevent full thread lagging pc
        maximumNumberOfProcesses: 15

    paths:
        - src
        - rules
        - tests
        - rules-tests

    # reportUnmatchedIgnoredErrors: false

    excludePaths:
        # tests files
        - "*/Expected/*"
        - '*/Fixture/*'
        - '*/Source/*'

    unused_public:
        methods: true
        properties: true
        constants: true

    type_coverage:
        return_type: 99
        param_type: 99
        property_type: 99

    cognitive_complexity:
        class: 30
        function: 10

    ignoreErrors:
        # php enum value minus
        - '#Parameter \#1 \$phpVersion of method Rector\\Config\\RectorConfig\:\:phpVersion\(\) expects (.*?), (.*?) given#'

        # part of implicit contract
        - '#Call to an undefined method PHPStan\\Type\\ConstantType\:\:getValue\(\)#'

        # part of tests
        - '#Class Rector\\Tests\\DowngradePhp72\\Rector\\ClassMethod\\DowngradeParameterTypeWideningRector\\Fixture\\SomeContainerInterface not found#'

        - '#Calling PHPStan\\Reflection\\Native\\NativeFunctionReflection\:\:getName\(\) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'

        # bool as status return
        - '#Method "refactorParamType\(\)" returns bool type, so the name should start with is/has/was#'

        -
            message: '#New objects with "\$functionLikeReflection" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp80/NodeAnalyzer/UnnamedArgumentResolver.php

        # nullable correction type
        -
            message: '#New objects with "\$parentReturnTypeNode" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp74/Rector/ClassMethod/DowngradeCovariantReturnTypeRector.php

        # chain joined epxr
        -
            message: '#New objects with "\$expr" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp55/Rector/Isset_/DowngradeArbitraryExpressionArgsToEmptyAndIssetRector.php

        # cleaning expr
        -
            message: '#New objects with "\$bitwiseOr" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp72/NodeManipulator/BitwiseFlagCleaner.php

        # not used on purpose, as child nodes continue to deal with params
        -
            message: '#Method call return value that should be used, but is not#'
            paths:
                - rules/DowngradePhp80/Rector/ClassMethod/DowngradeTrailingCommasInParamUseRector.php
                - src/PhpDocDecorator/PhpDocFromTypeDeclarationDecorator.php

        # value is always used
        -
            message: '#Method call return value that should be used, but is not#'
            path: rules/DowngradePhp74/Rector/ClassMethod/DowngradeCovariantReturnTypeRector.php

        - '#Method "decorateReturnWithSpecificType\(\)" returns bool type, so the name should start with is/has/was#'
        - '#Method "decorateParamWithSpecificType\(\)" returns bool type, so the name should start with is/has/was#'

        -
            message: '#New objects with "\$returnType" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: src/PhpDocDecorator/PhpDocFromTypeDeclarationDecorator.php

        # class-string
        - '#Parameter \#2 \$expectedClass of method Rector\\NodeAnalyzer\\MethodCallTypeAnalyzer\:\:isInstanceOf\(\) expects class\-string, string given#'

        -
            message: '#Attribute must have all names explicitly defined#'
            paths:
                - tests
                - rules-tests
