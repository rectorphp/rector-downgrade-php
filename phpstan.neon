includes:
    - vendor/symplify/phpstan-rules/config/symplify-rules.neon

parameters:
    level: 8

    # requires exact closure types
    checkMissingCallableSignature: true

    parallel:
        # to prevent full thread lagging pc
        maximumNumberOfProcesses: 15

    paths:
        - src
        - rules
        - tests
        - rules-tests

    reportUnmatchedIgnoredErrors: false

    excludePaths:
        # tests files
        - "*tests/*/Expected/*"
        - '*tests/*/Fixture/*'
        - '*tests/*/Source/*'
        - '*tests/Source/*'

    ignoreErrors:
        - '#Parameter (.*?)refactor\(\) should be contravariant with parameter \$node \(PhpParser\\Node\) of method Rector\\Core\\Contract\\Rector\\PhpRectorInterface\:\:refactor\(\)#'
        - '#Parameter \#1 \$node (.*?) of method (.*?)\:\:refactorWithScope\(\) should be contravariant with parameter \$node \(PhpParser\\Node\) of method Rector\\Core\\Contract\\Rector\\ScopeAwarePhpRectorInterface\:\:refactorWithScope\(\)#'

        # php enum value minus
        - '#Parameter \#1 \$phpVersion of method Rector\\Config\\RectorConfig\:\:phpVersion\(\) expects (.*?), (.*?) given#'

        # depens on enum preference
        - '#Register "Rector\\DowngradePhp80\\Rector\\Enum_\\DowngradeEnumToConstantListClassRector" service to "downgrade\-php80\.php" config set#'

        # part of implicit contract
        - '#Call to an undefined method PHPStan\\Type\\ConstantType\:\:getValue\(\)#'

        # part of tests
        - '#Class Rector\\Tests\\DowngradePhp72\\Rector\\ClassMethod\\DowngradeParameterTypeWideningRector\\Fixture\\SomeContainerInterface not found#'

        - '#Calling PHPStan\\Reflection\\Native\\NativeFunctionReflection\:\:getName\(\) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'

        # allowed in PHPUnit
        - '#Dynamic call to static method PHPUnit\\Framework\\Assert\:\:markTestSkipped\(\)#'

        # bool as status return
        - '#Method "refactorParamType\(\)" returns bool type, so the name should start with is/has/was#'

        # null arg is allowed list()
        - '#Parameter \#2 \$args of class PhpParser\\Node\\Expr\\FuncCall constructor expects array<PhpParser\\Node\\Arg\|PhpParser\\Node\\VariadicPlaceholder>, array<int, PhpParser\\Node\\Arg\|null> given#'

        # rules-tests
        -
            message: '#"Tests" namespace cannot be used outside of "tests" directory#'
            path: rules-tests


        # known types
        -
            message: '#Add explicit array type to assigned "\$unnamedArgs" expression#'
            paths:
                - rules/DowngradePhp80/NodeAnalyzer/NamedToUnnamedArgs.php
                - rules/DowngradePhp80/NodeAnalyzer/UnnamedArgumentResolver.php

        -
            message: '#New objects with "\$functionLikeReflection" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp80/NodeAnalyzer/UnnamedArgumentResolver.php

        # nullable correction type
        -
            message: '#New objects with "\$parentReturnTypeNode" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp74/Rector/ClassMethod/DowngradeCovariantReturnTypeRector.php

        # chain joined epxr
        -
            message: '#New objects with "\$expr" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp55/Rector/Isset_/DowngradeArbitraryExpressionArgsToEmptyAndIssetRector.php

        # cleaning expr
        -
            message: '#New objects with "\$bitwiseOr" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp72/NodeManipulator/BitwiseFlagCleaner.php

        # not used on purpose, as child nodes continue to deal with params
        -
            message: '#Method call return value that should be used, but is not#'
            paths:
                - rules/DowngradePhp80/Rector/ClassMethod/DowngradeTrailingCommasInParamUseRector.php
                - src/PhpDocDecorator/PhpDocFromTypeDeclarationDecorator.php

        # value is always used
        -
            message: '#Method call return value that should be used, but is not#'
            path: rules/DowngradePhp74/Rector/ClassMethod/DowngradeCovariantReturnTypeRector.php

        - '#Method "decorateReturnWithSpecificType\(\)" returns bool type, so the name should start with is/has/was#'
