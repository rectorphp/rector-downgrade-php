includes:
    - vendor/symplify/phpstan-rules/config/symplify-rules.neon

parameters:
    level: 8

    reportUnmatchedIgnoredErrors: false

    # requires exact closure types
    checkMissingCallableSignature: true

    paths:
        - src
        - rules
        - tests
        - rules-tests


    excludePaths:
        # tests files
        - "*/Expected/*"
        - '*/Fixture/*'
        - '*/Source/*'

    cognitive_complexity:
        class: 30
        function: 10

    ignoreErrors:
        # php enum value minus
        - '#Parameter \#1 \$phpVersion of method Rector\\Config\\RectorConfig\:\:phpVersion\(\) expects (.*?), (.*?) given#'

        # part of implicit contract
        - '#Call to an undefined method PHPStan\\Type\\ConstantType\:\:getValue\(\)#'

        # part of tests
        - '#Class Rector\\Tests\\DowngradePhp72\\Rector\\ClassMethod\\DowngradeParameterTypeWideningRector\\Fixture\\SomeContainerInterface not found#'

        - '#Calling PHPStan\\Reflection\\Native\\NativeFunctionReflection\:\:getName\(\) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'

        # bool as status return
        - '#Method "refactorParamType\(\)" returns bool type, so the name should start with is/has/was#'

        -
            message: '#New objects with "\$functionLikeReflection" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp80/NodeAnalyzer/UnnamedArgumentResolver.php

        # nullable correction type
        -
            message: '#New objects with "\$parentReturnTypeNode" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp74/Rector/ClassMethod/DowngradeCovariantReturnTypeRector.php

        # cleaning expr
        -
            message: '#New objects with "\$bitwiseOr" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: rules/DowngradePhp72/NodeManipulator/BitwiseFlagCleaner.php

        - '#Method "decorateReturnWithSpecificType\(\)" returns bool type, so the name should start with is/has/was#'
        - '#Method "decorateParamWithSpecificType\(\)" returns bool type, so the name should start with is/has/was#'

        -
            message: '#New objects with "\$returnType" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            path: src/PhpDocDecorator/PhpDocFromTypeDeclarationDecorator.php

        # class-string
        - '#Parameter \#2 \$expectedClass of method Rector\\NodeAnalyzer\\MethodCallTypeAnalyzer\:\:isInstanceOf\(\) expects class\-string, string given#'
        -
            message: '#Class cognitive complexity is 32, keep it under 30#'
            path: rules/DowngradePhp73/Rector/List_/DowngradeListReferenceAssignmentRector.php

        - '#Parameter \#3 \$stmt of method Rector\\DowngradePhp72\\Rector\\FuncCall\\DowngradePregUnmatchedAsNullConstantRector\:\:processReplace\(\) expects PhpParser\\Node\\Stmt, PhpParser\\Node given#'

        - '#but class PhpParser\\Node\\Stmt\\Expression is not generic#'

        # generics
        - '#Access to an undefined property Rector\\Core\\Contract\\PhpParser\\Node\\StmtsAwareInterface\:\:\$stmts#'
        - '#(.*?) should return array<PhpParser\\Node\\Stmt>\|Rector\\Core\\Contract\\PhpParser\\Node\\StmtsAwareInterface\|null but returns array<int, PhpParser\\Node\\Stmt\\Expression\|Rector\\Core\\Contract\\PhpParser\\Node\\StmtsAwareInterface>#'


        - '#(.*?)\:\:refactor\(\) should return array<PhpParser\\Node\\Stmt>\|PhpParser\\Node\\Stmt\\ClassConst\|null but returns array<PhpParser\\Node\\Stmt>\|PhpParser\\Node\\Stmt\|null#'

        -
            message: '#Use value object over return of values#'
            path: rules/DowngradePhp71/Rector/StaticCall/DowngradeClosureFromCallableRector.php

        - '#Cognitive complexity for "Rector\\DowngradePhp70\\Rector\\FuncCall\\DowngradeSessionStartArrayOptionsRector\:\:refactor\(\)" is 12, keep it under 10#'
